summary(loansData)
View(loansData)
?table
getwd()
??lme4
?lme
ls()
library(RCircos)
data(RCircos.Heatmap.Data)
head(RCircos.Heatmap.Data)
range(RCircos.Heatmap.Data$BT.549)
data(warpbreaks)
anova.war = aov(warpbreaks$breaks ~ warpbreaks$wool + warpbreaks$tension)
anova.war
anova.war$model
anova.war
summary(anova.war)
library(glm2)
install.packages("glm2")
library(glm2)
data(crabs)
pm = glm(crabs$Satellites~crabs$Width,family = "poisson")
summary(pm)
logit(0.2)
logit(0.2)
?log
??logit
library(boot)
logit(0.2)
print = data.frame(crab,pred = pm$fitted.values)
print = data.frame(crab,pred = pm$fitted)
print = data.frame(crabs,pred = pm$fitted)
print
pm$linear.predictors
library(Aclust)
data(betas.7)
exposure = rbinom(ncol(betas.7), 1,prob = 0.5) ## generate random exposure
covariates = matrix(rnorm(2*ncol(betas.7)), ncol = 2)
rownames(covariates) = colnames(betas.7)
dim(covariates)
head(covariates)
?covariates
?GEE.clusters
?knitr
library(Aclust)
?Aclust
library(Aclust)
install.packages("locfit")
library(Aclust)
install.packages("XVector")
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part
segplot
tree
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'red'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
ls()
getwd()
list.files()
install.packages("rPython")
?rPython
library(rPython)
?rPython
?python.call
a = 1:4
b = 1:5
python.call("len",a)
python.call("len",b)
python.exec("def concat(a,b): return a+b")
python.exec("concat",a,b)
python.call("concat",a,b)
c = python.call("concat",a,b)
c
c = python.call("isinstance",c)
c = python.call("isinstance",c,list)
c = python.call("isinstance",c,"list")
c = python.call("typeof",c)
c = python.call("type",c)
my.path = "~/Documents/JHMI-Research/charmData/ShyamBiswal/" # Local path
sessionInfo()
#############################################
ls -l /Library/Frameworks/R.framework/Versions/
/\
export RSTUDIO_WHICH_R=/usr/local/bin/R
library(RCircos)
library(BiocGenerics)
library(Biobase)
my.path = "~/Documents/JHMI-Research/charmData/ShyamBiswal/" # Local path
parent = read.csv("parent_genes_distFromTSS.csv",stringsAsFactors = FALSE)
setwd(my.path)
parent = read.csv("parent_genes_distFromTSS.csv",stringsAsFactors = FALSE)
knock = read.csv("knockin_genes_distFromTSS.csv",stringsAsFactors = FALSE)
curate.devaPeaks.to.rcircos = function(peaks.df) {
peaks.df.x = data.frame(peaks.df[,c(3:23,1,2)])
cols.peaks = colnames(peaks.df.x)
cols.peaks[2] = "START"
cols.peaks[3] = "END"
colnames(peaks.df.x) = cols.peaks
return(peaks.df.x)
}
parent.x = curate.devaPeaks.to.rcircos(parent)
knock.x = curate.devaPeaks.to.rcircos(knock)
collect.pathways = function(status,path) {
files = list.files(path,full.names=T)
new_df = data.frame()
for (i in 1:length(files)) {
x = read.csv(files[i])
pathwayName = gsub(pattern = paste0("_",status,".csv"),replacement="",x=(gsub(".+/","",files[i])))
x = x[,c(4:7,1:3,7:22)]
knock_df = data.frame(x,pathway = pathwayName,pathwayGene = paste0(x$name,"-",pathwayName))
new_df = rbind(new_df,knock_df)
}
return(new_df)
}
knock_df = collect.pathways(status = "H460_knock","Pathways_knock")
parent_df = collect.pathways(status= "H460_parent","Pathways_parent")
View(parent_df)
pathway.df = knock_df
levels.df = levels(pathway.df)
levels.df = levels(pathway.df$pathway)
new.df = data.frame()
for (i in seq_along(levels.df)){
print(levels.df[i])
}
for (i in seq_along(levels.df)){
genes = pathway.df$name[pathway.df$pathway == levels.df[i],]
print(genes)
}
for (i in seq_along(levels.df)){
genes = pathway.df$name[pathway.df$pathway == levels.df[i]]
print(genes)
}
View(knock_df)
View(knock_df)
new.df = rbind(new.df, data.frame(levels.df[i],as.list(genes)))
View(new.df)
View(knock_df)
names(knock_df)
write.csv(knock_df,file = "knock-in-pathway.csv")
write.csv(parent_df,file = "parent-pathway.csv")
make.table = function(pathway.df) {
levels.df = levels(pathway.df$pathway)
#     new.df = data.frame(pathway = list(),genes = list())
new.df = data.frame()
for (i in seq_along(levels.df)){
genes = pathway.df$name[pathway.df$pathway == levels.df[i]]
decscription = pathway.df$description[pathway.df$pathway == levels.df[i]]
new.df = rbind(new.df, data.frame(levels.df[i],as.list(genes)))
}
colnames(new.df) = c("Pathway","Genes Intersecting")
return(new.df)
}
knock.new.df = make.table(knock_df)
knock.new.df = make.table(knock_df)
knock.new.df = make.table(knock_df)
make.table = function(pathway.df) {
levels.df = levels(pathway.df$pathway)
#     new.df = data.frame(pathway = list(),genes = list())
new.df = data.frame()
for (i in seq_along(levels.df)){
genes = pathway.df$name[pathway.df$pathway == levels.df[i]]
decscription = pathway.df$description[pathway.df$pathway == levels.df[i]]
new.df = rbind(new.df, data.frame(levels.df[i],as.list(as.character(genes))))
}
colnames(new.df) = c("Pathway","Genes Intersecting")
return(new.df)
}
knock.new.df = make.table(knock_df)
make.table = function(pathway.df) {
levels.df = levels(pathway.df$pathway)
#     new.df = data.frame(pathway = list(),genes = list())
new.df = data.frame(Pathways = as.character(),Genes = as.list())
for (i in seq_along(levels.df)){
genes = pathway.df$name[pathway.df$pathway == levels.df[i]]
decscription = pathway.df$description[pathway.df$pathway == levels.df[i]]
new.df = rbind(new.df, data.frame(levels.df[i],as.list(as.character(genes))))
}
return(new.df)
}
knock.new.df = make.table(knock_df)
make.table = function(pathway.df) {
levels.df = levels(pathway.df$pathway)
#     new.df = data.frame(pathway = list(),genes = list())
new.df = data.frame()
for (i in seq_along(levels.df)){
genes = pathway.df$name[pathway.df$pathway == levels.df[i]]
decscription = pathway.df$description[pathway.df$pathway == levels.df[i]]
new.df = rbind(new.df, data.frame(levels.df[i],as.list(as.character(genes))))
}
return(new.df)
}
knock.new.df = make.table(knock_df)
pathway.df = knock_df
levels.df = levels(pathway.df$pathway)
levels.df
new.df = data.frame()
for (i in seq_along(levels.df)){
genes = pathway.df$name[pathway.df$pathway == levels.df[i]]
genes
new.df = rbind(new.df, data.frame(levels.df[i],as.list(as.character(genes))))
}
i=1
genes = pathway.df$name[pathway.df$pathway == levels.df[i]]
genes
genes = as.character(pathway.df$name[pathway.df$pathway == levels.df[i]])
genes
new.df = rbind(new.df, data.frame(levels.df[i],as.list(as.character(genes))))
new.df
new.df = rbind(new.df, data.frame(as.character(levels.df[i]),as.list(as.character(genes))))
genes = as.character(pathway.df$name[pathway.df$pathway == levels.df[i]])
genes
new.df = rbind(new.df, data.frame(as.character(levels.df[i]),as.list(genes)))
load("pd01.rda")
View(pd)
load("pd02.rda")
View(pd)
View(as.data.frame(rownames(pd),pd$qual))
View(rownames(pd),pd$qual)
View(pd$qual)
View(pd[,1],pd$qual)
rownames(pd)
as.data.frame(rownames(pd),pd$qual)
write.csv(pd,file = "pd.csv")
