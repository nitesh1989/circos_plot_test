summary(pm)
logit(0.2)
logit(0.2)
?log
??logit
library(boot)
logit(0.2)
print = data.frame(crab,pred = pm$fitted.values)
print = data.frame(crab,pred = pm$fitted)
print = data.frame(crabs,pred = pm$fitted)
print
pm$linear.predictors
library(Aclust)
data(betas.7)
exposure = rbinom(ncol(betas.7), 1,prob = 0.5) ## generate random exposure
covariates = matrix(rnorm(2*ncol(betas.7)), ncol = 2)
rownames(covariates) = colnames(betas.7)
dim(covariates)
head(covariates)
?covariates
?GEE.clusters
?knitr
library(Aclust)
?Aclust
library(Aclust)
install.packages("locfit")
library(Aclust)
install.packages("XVector")
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part
segplot
tree
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'red'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
ls()
getwd()
list.files()
install.packages("rPython")
?rPython
library(rPython)
?rPython
?python.call
a = 1:4
b = 1:5
python.call("len",a)
python.call("len",b)
python.exec("def concat(a,b): return a+b")
python.exec("concat",a,b)
python.call("concat",a,b)
c = python.call("concat",a,b)
c
c = python.call("isinstance",c)
c = python.call("isinstance",c,list)
c = python.call("isinstance",c,"list")
c = python.call("typeof",c)
c = python.call("type",c)
my.path = "~/Documents/JHMI-Research/charmData/ShyamBiswal/" # Local path
sessionInfo()
#############################################
ls -l /Library/Frameworks/R.framework/Versions/
/\
export RSTUDIO_WHICH_R=/usr/local/bin/R
date()
sessionInfo()
source("http://bioconductor.org/biocLite.R")
biocLite(c("RCircos","bumphunter","minfi","BiocGenerics","Biobase","limma","charm"))
my.path = "~/Documents/JHMI-Research/charmData/ShyamBiswal/" # Local path
# my.path = "~/TestRun/ShyamBiswal/"
# Import libraries required
library(RCircos)
library(BiocGenerics)
library(Biobase)
# Import Peaks data from Shywam Biswals
parent = read.csv("parent_genes_distFromTSS.csv",stringsAsFactors = FALSE)
my.path = "~/Documents/JHMI-Research/charmData/ShyamBiswal/" # Local path
list.files()
setwd(my.path)
# Import libraries required
library(RCircos)
library(BiocGenerics)
library(Biobase)
# Import Peaks data from Shywam Biswals
parent = read.csv("parent_genes_distFromTSS.csv",stringsAsFactors = FALSE)
knock = read.csv("knockin_genes_distFromTSS.csv",stringsAsFactors = FALSE)
curate.devaPeaks.to.rcircos = function(peaks.df) {
peaks.df.x = data.frame(peaks.df[,c(3:23,1,2)])
cols.peaks = colnames(peaks.df.x)
cols.peaks[2] = "START"
cols.peaks[3] = "END"
colnames(peaks.df.x) = cols.peaks
return(peaks.df.x)
}
parent.x = curate.devaPeaks.to.rcircos(parent)
knock.x = curate.devaPeaks.to.rcircos(knock)
params = RCircos.Get.Plot.Parameters()
params
data(UCSC.HG19.Human.CytoBandIdeogram)
cyto.info = UCSC.HG19.Human.CytoBandIdeogram;
chr.exclude = NULL;
# Determine tracks inside and outside
tracks.inside = 5;
tracks.outside = 4;
# Initialize RCircos Core components
RCircos.Set.Core.Components(cyto.info, chr.exclude=chr.exclude,tracks.inside=tracks.inside,tracks.outside= tracks.outside);
rcircos.cyto = RCircos.Get.Plot.Ideogram()
rcircos.position = RCircos.Get.Plot.Positions()
# rcircos.gene.locations = RCircos.Get.Gene.Label.Locations(genomic.data=parent.x )
params = RCircos.Get.Plot.Parameters()
params
params$radius.len = 2.0;
params$base.per.unit =1000;
params$track.padding = 0.02;
params$track.height = 0.3;
params$chrom.width = 0.2;
params$chr.name.pos = 2.24;
params$text.size = 0.6;
RCircos.Reset.Plot.Parameters(params);
RCircos.List.Parameters() # For reference in Rout file
################################################
# Step 4: Make RCircos plots
################################################
out.file = "BiswalCircos.png"
png(file = out.file, height = 22, width = 22,res=500,units = "in")
plot(main="Inner Tracks: H460 Knocking-Genes; Outer Tracks: H460 Parent-genes")
RCircos.Set.Plot.Area()
# Plot chromosome ideogram
RCircos.Chromosome.Ideogram.Plot();
# Information for track 1 "inside" - Plot gene names(column 13)
RCircos.Gene.Name.Plot(gene.data= knock.x,name.col= 13,track.num=2,side="in")
RCircos.Gene.Connector.Plot(genomic.data=knock.x,track.num=1,side = "in")
#Information for track 1 "outside" - Plot gene names(column 15)
RCircos.Gene.Name.Plot(gene.data=parent.x,name.col= 13,track.num=2,side="out")
RCircos.Gene.Connector.Plot(genomic.data=parent.x,track.num=1,side="out")
# Plot Peaks like RCircos Line data
RCircos.Line.Plot(line.data=knock.x,data.col=4,track.num=3,side="in")
RCircos.Line.Plot(line.data=parent.x,data.col=4,track.num=3,side = "out")
dev.off()
# Initialize RCircos Core components
RCircos.Set.Core.Components(cyto.info, chr.exclude=chr.exclude,tracks.inside=tracks.inside,tracks.outside= tracks.outside);
################################################
# Step 3: Set R Circos plot parameters
################################################
rcircos.cyto = RCircos.Get.Plot.Ideogram()
rcircos.position = RCircos.Get.Plot.Positions()
# rcircos.gene.locations = RCircos.Get.Gene.Label.Locations(genomic.data=parent.x )
params = RCircos.Get.Plot.Parameters()
params$radius.len = 2.0;
params$base.per.unit =1000;
params$track.padding = 0.02;
params$track.height = 0.3;
params$chrom.width = 0.2;
params$chr.name.pos = 2.24;
params$text.size = 0.6;
RCircos.Reset.Plot.Parameters(params);
RCircos.List.Parameters() # For reference in Rout file
################################################
# Step 4: Make RCircos plots
################################################
out.file = "BiswalCircos.png"
png(file = out.file, height = 25, width = 25,res=500,units = "in")
plot(main="Inner Tracks: H460 Knocking-Genes; Outer Tracks: H460 Parent-genes")
RCircos.Set.Plot.Area()
# Plot chromosome ideogram
RCircos.Chromosome.Ideogram.Plot();
# Information for track 1 "inside" - Plot gene names(column 13)
RCircos.Gene.Name.Plot(gene.data= knock.x,name.col= 13,track.num=2,side="in")
RCircos.Gene.Connector.Plot(genomic.data=knock.x,track.num=1,side = "in")
#Information for track 1 "outside" - Plot gene names(column 15)
RCircos.Gene.Name.Plot(gene.data=parent.x,name.col= 13,track.num=2,side="out")
RCircos.Gene.Connector.Plot(genomic.data=parent.x,track.num=1,side="out")
# Plot Peaks like RCircos Line data
RCircos.Line.Plot(line.data=knock.x,data.col=4,track.num=3,side="in")
RCircos.Line.Plot(line.data=parent.x,data.col=4,track.num=3,side = "out")
dev.off()
################################################
# Step 2: Initialize base of Circos plot
################################################
# Call RCircos Cytoband for chromosomes
data(UCSC.HG19.Human.CytoBandIdeogram)
cyto.info = UCSC.HG19.Human.CytoBandIdeogram;
# Exclude sex chromosomes
# chr.exclude = c("chrX","chrY");
chr.exclude = NULL;
# Determine tracks inside and outside
tracks.inside = 5;
tracks.outside = 4;
# Initialize RCircos Core components
RCircos.Set.Core.Components(cyto.info, chr.exclude=chr.exclude,tracks.inside=tracks.inside,tracks.outside= tracks.outside);
################################################
# Step 3: Set R Circos plot parameters
################################################
rcircos.cyto = RCircos.Get.Plot.Ideogram()
rcircos.position = RCircos.Get.Plot.Positions()
# rcircos.gene.locations = RCircos.Get.Gene.Label.Locations(genomic.data=parent.x )
params = RCircos.Get.Plot.Parameters()
params$radius.len = 2.0;
params$base.per.unit =1000;
params$track.padding = 0.02;
params$track.height = 0.2;
params$chrom.width = 0.2;
params$chr.name.pos = 2.24;
params$text.size = 0.6;
RCircos.Reset.Plot.Parameters(params);
RCircos.List.Parameters() # For reference in Rout file
################################################
# Step 4: Make RCircos plots
################################################
out.file = "BiswalCircos.png"
png(file = out.file, height = 25, width = 25,res=250,units = "in")
plot(main="Inner Tracks: H460 Knocking-Genes; Outer Tracks: H460 Parent-genes")
RCircos.Set.Plot.Area()
# Plot chromosome ideogram
RCircos.Chromosome.Ideogram.Plot();
# Information for track 1 "inside" - Plot gene names(column 13)
RCircos.Gene.Name.Plot(gene.data= knock.x,name.col= 13,track.num=2,side="in")
RCircos.Gene.Connector.Plot(genomic.data=knock.x,track.num=1,side = "in")
#Information for track 1 "outside" - Plot gene names(column 15)
RCircos.Gene.Name.Plot(gene.data=parent.x,name.col= 13,track.num=2,side="out")
RCircos.Gene.Connector.Plot(genomic.data=parent.x,track.num=1,side="out")
# Plot Peaks like RCircos Line data
RCircos.Line.Plot(line.data=knock.x,data.col=4,track.num=3,side="in")
RCircos.Line.Plot(line.data=parent.x,data.col=4,track.num=3,side = "out")
dev.off()
