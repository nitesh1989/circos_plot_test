mod0 = matrix(1,nrow=nrow(pd),ncol=1)
mod  = model.matrix(~1 +factor(pd$tissue,levels=c("liver","colon","spleen")))
View(mod0)
View(mod)
library(corpcor)
thedmrs = dmrFind(p=p, mod=mod, mod0=mod0, coeff=2, pns=pns, chr=chr, pos=pos)
###################################################
### code chunk number 18: qval
###################################################
withq = qval(p=p, dmr=thedmrs, numiter=3, verbose=FALSE, mc=1)
###################################################
### code chunk number 19: plotDMRs
###################################################
cpg.cur = read.delim("http://rafalab.jhsph.edu/CGI/model-based-cpg-islands-hg18.txt",
as.is=TRUE)
plotDMRs(dmrs=thedmrs, Genome=Hsapiens, cpg.islands=cpg.cur, exposure=pd$tissue,
outfile="./colon-liver.pdf", which_plot=c(1),
which_points=c("colon","liver"), smoo="loess", ADD=3000,
cols=c("black","red","blue"))
###################################################
### code chunk number 20: panel3_G
###################################################
dat0 = spatialAdjust(rawData, copy=FALSE)
dat0 = bgAdjust(dat0, copy=FALSE)
G = pm(dat0)[,,1] #from oligo
G = G[Index,]
plotDMRs(dmrs=thedmrs, Genome=Hsapiens, cpg.islands=cpg.cur, exposure=pd$tissue,
outfile="./colon-liver2.pdf", which_plot=c(1),
which_points=c("colon","liver"), smoo="loess", ADD=3000,
cols=c("black","red","blue"), panel3="G", G=G, seq=seq)
###################################################
### code chunk number 21: continuous
###################################################
pd$x = c(1,2,3,4,5,6)
mod0 = matrix(1,nrow=nrow(pd),ncol=1)
mod  = model.matrix(~1 +pd$x)
coeff = 2
thedmrs2 = dmrFind(p=p, mod=mod, mod0=mod0, coeff=coeff, pns=pns, chr=chr, pos=pos)
###################################################
### code chunk number 22: plotcat
###################################################
groups = as.numeric(cut(mod[,coeff],c(-Inf,2,4,Inf))) #You can change these cutpoints.
pd$groups = c("low","medium","high")[groups]
plotDMRs(dmrs=thedmrs2, Genome=Hsapiens, cpg.islands=cpg.cur, exposure=pd$groups,
outfile="./test.pdf", which_plot=c(1), smoo="loess", ADD=3000,
cols=c("black","red","blue"))
###################################################
### code chunk number 23: plotcor
###################################################
plotDMRs(dmrs=thedmrs2, Genome=Hsapiens, cpg.islands=cpg.cur, exposure=pd$x,
outfile="./x.pdf", which_plot=c(1), smoo="loess", ADD=3000,
cols=c("black","red","blue"))
###################################################
### code chunk number 24: regionMatch
###################################################
ov = regionMatch(thedmrs$dmrs,thedmrs2$dmrs)
head(ov)
###################################################
### code chunk number 25: plotRegions
###################################################
mytable = thedmrs$dmrs[,c("chr","start","end")]
mytable[2,] = c("chr1",1,1000) #not on array
mytable$start = as.numeric(mytable$start)
mytable$end = as.numeric(mytable$end)
plotRegions(thetable=mytable[c(1),], cleanp=thedmrs$cleanp, chr=chr,
pos=pos, Genome=Hsapiens, cpg.islands=cpg.cur, outfile="myregions.pdf",
exposure=pd$tissue, exposure.continuous=FALSE)
###################################################
### code chunk number 26: dmrFinder
###################################################
dmr <- dmrFinder(rawData, p=p0, groups=pd$tissue,
compare=c("colon", "liver","colon", "spleen"),
removeIf=expression(nprobes<4 | abs(diff)<.05 | abs(maxdiff)<.05))
###################################################
### code chunk number 27: headDmr
###################################################
names(dmr)
names(dmr$tabs)
head(dmr$tabs[[1]])
###################################################
### code chunk number 28: dmrPlot
###################################################
dmrPlot(dmr=dmr, which.table=1, which.plot=c(1), legend.size=1,
all.lines=TRUE, all.points=FALSE, colors.l=c("blue","black","red"),
colors.p=c("blue","black"), outpath=".", cpg.islands=cpg.cur, Genome=Hsapiens)
###################################################
### code chunk number 29: regionPlot
###################################################
mytab = data.frame(chr=as.character(dmr$tabs[[1]]$chr[1]),
start=as.numeric(c(dmr$tabs[[1]]$start[1])),
end=as.numeric(c(dmr$tabs[[1]]$end[1])), stringsAsFactors=FALSE)
regionPlot(tab=mytab, dmr=dmr, cpg.islands=cpg.cur, Genome=Hsapiens,
outfile="myregions.pdf", which.plot=1:5, plot.these=c("liver","colon"),
cl=c("blue","black"), legend.size=1, buffer=3000)
###################################################
### code chunk number 30: paired
###################################################
pData(rawData)$pair = c(1,1,2,2,1,2)
dmr2 <- dmrFinder(rawData, p=p0, groups=pd$tissue,
compare=c("colon", "liver","colon", "spleen"),
removeIf=expression(nprobes<4 | abs(diff)<.05 | abs(maxdiff)<.05),
paired=TRUE, pairs=pData(rawData)$pair, cutoff=0.95)
###################################################
### code chunk number 31: dmrPlot for paired analysis
###################################################
dmrPlot(dmr=dmr2, which.table=1, which.plot=c(3), legend.size=1, all.lines=TRUE,
all.points=FALSE, colors.l=c("blue","black"), colors.p=c("blue","black"),
outpath=".", cpg.islands=cpg.cur, Genome=Hsapiens)
###################################################
### code chunk number 32: regionPlot for paired analysis
###################################################
regionPlot(tab=mytab, dmr=dmr2, cpg.islands=cpg.cur, Genome=Hsapiens,
outfile="myregions_paired.pdf", which.plot=1:5,
plot.these=c("colon-liver"), cl=c("black"), legend.size=1, buffer=3000)
###################################################
### code chunk number 33: charm.Rnw:380-381
###################################################
sessionInfo()
ls()
library(charm)
library(charmData)
load("~/TestRun/Charm Analysis/charmData/rdas/M.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/otherstuff.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/p.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/pd.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/pdExp.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/pmq.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/qc_COPD.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/rawData.rda")
View(p)
library(charm)
library(charmData)
###################################################
### code chunk number 3: dataDir
###################################################
dataDir <- system.file("data", package="charmData")
dataDir
###################################################
### code chunk number 4: phenodata
###################################################
phenodataDir <- system.file("extdata", package="charmData")
pd <- read.delim(file.path(phenodataDir, "phenodata.txt"))
phenodataDir
pd
###################################################
### code chunk number 5: validatePd
###################################################
res <- validatePd(pd)
###################################################
### code chunk number 6: readData
###################################################
rawData <- readCharm(files=pd$filename, path=dataDir, sampleKey=pd,
sampleNames=pd$sampleID)
rawData
###################################################
### code chunk number 7: qc
###################################################
qual <- qcReport(rawData, file="qcReport.pdf")
qual
###################################################
### code chunk number 8: Remove low-quality samples
###################################################
qc.min = 78
##Remove arrays with quality scores below qc.min:
rawData=rawData[,qual$pmSignal>=qc.min]
qual=qual[qual$pmSignal>=qc.min,]
pd=pd[pd$sampleID%in%rownames(qual),]
pData(rawData)$qual=qual$pmSignal
###################################################
### code chunk number 9: pmQuality
###################################################
pmq = pmQuality(rawData)
rmpmq = rowMeans(pmq)
okqc = which(rmpmq>75)
###################################################
### code chunk number 10: getControlIndex
###################################################
library(BSgenome.Hsapiens.UCSC.hg18)
ctrlIdx <- getControlIndex(rawData, subject=Hsapiens, noCpGWindow=600)
###################################################
### code chunk number 11: controlQC
###################################################
cqc = controlQC(rawData=rawData, controlIndex=ctrlIdx, IDcol="sampleID",
expcol="tissue", ylimits=c(-6,8),
outfile="boxplots_check.pdf", height=7, width=9)
cqc
###################################################
### code chunk number 12: oligo_functions
###################################################
chr = pmChr(rawData)
pns = probeNames(rawData)
pos = pmPosition(rawData)
seq = pmSequence(rawData)
pd  = pData(rawData)
###################################################
### code chunk number 13: methp_density
###################################################
p <- methp(rawData, controlIndex=ctrlIdx,
plotDensity="density.pdf", plotDensityGroups=pd$tissue)
head(p)
###################################################
### code chunk number 14: cmdsplot
###################################################
cmdsplot(labcols=c("red","black","blue"), expcol="tissue",
rawData=rawData, p=p, okqc=okqc, noXorY=TRUE,
outfile="cmds_topN.pdf", topN=c(100000,1000))
###################################################
### code chunk number 15: select_probes
###################################################
Index = setdiff(which(rmpmq>75),ctrlIdx)
Index = Index[order(chr[Index], pos[Index])]
p0 = p #save for pipeline 2 example
p = p[Index,]
seq = seq[Index]
chr = chr[Index]
pos = pos[Index]
pns = pns[Index]
pns = clusterMaker(chr,pos)
###################################################
### code chunk number 16: mods
###################################################
mod0 = matrix(1,nrow=nrow(pd),ncol=1)
mod  = model.matrix(~1 +factor(pd$tissue,levels=c("liver","colon","spleen")))
###################################################
### code chunk number 17: dmrFind
###################################################
library(corpcor)
thedmrs = dmrFind(p=p, mod=mod, mod0=mod0, coeff=2, pns=pns, chr=chr, pos=pos)
###################################################
### code chunk number 18: qval
###################################################
withq = qval(p=p, dmr=thedmrs, numiter=3, verbose=FALSE, mc=1)
###################################################
### code chunk number 19: plotDMRs
###################################################
cpg.cur = read.delim("http://rafalab.jhsph.edu/CGI/model-based-cpg-islands-hg18.txt",
as.is=TRUE)
plotDMRs(dmrs=thedmrs, Genome=Hsapiens, cpg.islands=cpg.cur, exposure=pd$tissue,
outfile="./colon-liver.pdf", which_plot=c(1),
which_points=c("colon","liver"), smoo="loess", ADD=3000,
cols=c("black","red","blue"))
###################################################
### code chunk number 20: panel3_G
###################################################
dat0 = spatialAdjust(rawData, copy=FALSE)
dat0 = bgAdjust(dat0, copy=FALSE)
G = pm(dat0)[,,1] #from oligo
G = G[Index,]
plotDMRs(dmrs=thedmrs, Genome=Hsapiens, cpg.islands=cpg.cur, exposure=pd$tissue,
outfile="./colon-liver2.pdf", which_plot=c(1),
which_points=c("colon","liver"), smoo="loess", ADD=3000,
cols=c("black","red","blue"), panel3="G", G=G, seq=seq)
###################################################
### code chunk number 21: continuous
###################################################
pd$x = c(1,2,3,4,5,6)
mod0 = matrix(1,nrow=nrow(pd),ncol=1)
mod  = model.matrix(~1 +pd$x)
coeff = 2
thedmrs2 = dmrFind(p=p, mod=mod, mod0=mod0, coeff=coeff, pns=pns, chr=chr, pos=pos)
###################################################
### code chunk number 22: plotcat
###################################################
groups = as.numeric(cut(mod[,coeff],c(-Inf,2,4,Inf))) #You can change these cutpoints.
pd$groups = c("low","medium","high")[groups]
plotDMRs(dmrs=thedmrs2, Genome=Hsapiens, cpg.islands=cpg.cur, exposure=pd$groups,
outfile="./test.pdf", which_plot=c(1), smoo="loess", ADD=3000,
cols=c("black","red","blue"))
###################################################
### code chunk number 23: plotcor
###################################################
plotDMRs(dmrs=thedmrs2, Genome=Hsapiens, cpg.islands=cpg.cur, exposure=pd$x,
outfile="./x.pdf", which_plot=c(1), smoo="loess", ADD=3000,
cols=c("black","red","blue"))
###################################################
### code chunk number 24: regionMatch
###################################################
ov = regionMatch(thedmrs$dmrs,thedmrs2$dmrs)
head(ov)
###################################################
### code chunk number 25: plotRegions
###################################################
mytable = thedmrs$dmrs[,c("chr","start","end")]
mytable[2,] = c("chr1",1,1000) #not on array
mytable$start = as.numeric(mytable$start)
mytable$end = as.numeric(mytable$end)
plotRegions(thetable=mytable[c(1),], cleanp=thedmrs$cleanp, chr=chr,
pos=pos, Genome=Hsapiens, cpg.islands=cpg.cur, outfile="myregions.pdf",
exposure=pd$tissue, exposure.continuous=FALSE)
###################################################
### code chunk number 26: dmrFinder
###################################################
dmr <- dmrFinder(rawData, p=p0, groups=pd$tissue,
compare=c("colon", "liver","colon", "spleen"),
removeIf=expression(nprobes<4 | abs(diff)<.05 | abs(maxdiff)<.05))
###################################################
### code chunk number 27: headDmr
###################################################
names(dmr)
names(dmr$tabs)
head(dmr$tabs[[1]])
###################################################
### code chunk number 28: dmrPlot
###################################################
dmrPlot(dmr=dmr, which.table=1, which.plot=c(1), legend.size=1,
all.lines=TRUE, all.points=FALSE, colors.l=c("blue","black","red"),
colors.p=c("blue","black"), outpath=".", cpg.islands=cpg.cur, Genome=Hsapiens)
###################################################
### code chunk number 29: regionPlot
###################################################
mytab = data.frame(chr=as.character(dmr$tabs[[1]]$chr[1]),
start=as.numeric(c(dmr$tabs[[1]]$start[1])),
end=as.numeric(c(dmr$tabs[[1]]$end[1])), stringsAsFactors=FALSE)
regionPlot(tab=mytab, dmr=dmr, cpg.islands=cpg.cur, Genome=Hsapiens,
outfile="myregions.pdf", which.plot=1:5, plot.these=c("liver","colon"),
cl=c("blue","black"), legend.size=1, buffer=3000)
###################################################
### code chunk number 30: paired
###################################################
pData(rawData)$pair = c(1,1,2,2,1,2)
dmr2 <- dmrFinder(rawData, p=p0, groups=pd$tissue,
compare=c("colon", "liver","colon", "spleen"),
removeIf=expression(nprobes<4 | abs(diff)<.05 | abs(maxdiff)<.05),
paired=TRUE, pairs=pData(rawData)$pair, cutoff=0.95)
###################################################
### code chunk number 31: dmrPlot for paired analysis
###################################################
dmrPlot(dmr=dmr2, which.table=1, which.plot=c(3), legend.size=1, all.lines=TRUE,
all.points=FALSE, colors.l=c("blue","black"), colors.p=c("blue","black"),
outpath=".", cpg.islands=cpg.cur, Genome=Hsapiens)
###################################################
### code chunk number 32: regionPlot for paired analysis
###################################################
regionPlot(tab=mytab, dmr=dmr2, cpg.islands=cpg.cur, Genome=Hsapiens,
outfile="myregions_paired.pdf", which.plot=1:5,
plot.these=c("colon-liver"), cl=c("black"), legend.size=1, buffer=3000)
###################################################
### code chunk number 33: charm.Rnw:380-381
###################################################
sessionInfo()
library("BiocInstaller", lib.loc="C:/Program Files/R/R-2.15.2/library")
library(bumphunter)
biocLite("bumphunter")
library(bumphunter)
library(limma)
load("~/TestRun/Charm Analysis/charmData/rdas/M.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/otherstuff.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/p.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/pd.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/pdExp.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/pmq.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/qc_COPD.rda")
load("~/TestRun/Charm Analysis/charmData/rdas/rawData.rda")
View(p)
library(limma)
library(bumphunter)
?bumphunter
?matchGenes
?methp
library(charm)
biocLite("charm")
library("BiocInstaller", lib.loc="C:/Program Files/R/R-3.0.1/library")
biocLite("charm")
library(charm)
?methp
?bumphunter
biocLite("rtracklayer")
library(rtracklayer)
?GRangesForUCSCGenome
install.packages("knitr")
library(Aclust)
?assign.to.clusters
?GEE.clusters
Aclust
Acluster
load("~/TestRun/TCGA_Data_Analysis/HNSCC_DNA_Methylation/HNSCC_from_Enigma/AClust_HNSCC/objs/annotations.rda")
load("~/TestRun/TCGA_Data_Analysis/HNSCC_DNA_Methylation/HNSCC_from_Enigma/AClust_HNSCC/objs/geeResultsClusters.rda")
load("~/TestRun/TCGA_Data_Analysis/HNSCC_DNA_Methylation/HNSCC_from_Enigma/AClust_HNSCC/objs/cluster.rda")
length(cluster.list)
head(cluster.list)
head(GEE.results.clusters)
head(GEE.results.clusters,2)
dim(GEE.results.clusters)
View(GEE.results.clusters)
library(Aclust)
edit(summarize.top.clusters)
?Aclust
data(betas.7) ## upload methylation data
exposure <- rbinom(ncol(betas.7), 1,prob = 0.5) ## generate random exposure
covariates <- matrix(rnorm(2*ncol(betas.7)), ncol = 2)
rownames(covariates) <- colnames(betas.7)
data(annot)  ## load annotation created using the IlluminaHumanMethylation450k.db package on July 2013
clusters.list <- assign.to.clusters(betas.7, annot)
GEE.results.clusters <- GEE.clusters(betas.7, clusters.list, exposure, covariates, id = colnames(betas.7), working.cor = "ex")
top.clusters.summary <- summarize.top.clusters(betas.7, covariates, exposure, id = colnames(betas.7), GEE.results.clusters, "results.tex", annot= annot)
View(GEE.results.clusters)
debug(summarize.top.clusters)
top.clusters.summary <- summarize.top.clusters(betas.7, covariates, exposure, id = colnames(betas.7), GEE.results.clusters, "results.tex", annot= annot)
summary(GEE.results.clusters$exposure_pvalue)
class(GEE.results.clusters)
undebug(summarize.top.clusters)
top.clusters.summary <- summarize.top.clusters(betas.7, covariates, exposure, id = colnames(betas.7), GEE.results.clusters, "results.tex", annot= annot)
top.clusters.summary
setwd("~/TestRun/TCGA_Data_Analysis/Lung_Cancer_AD_SC/")
bumps_ad = read.csv("LUNG_Cancer_Ad/bumps_LUAD.csv")
bumps_sc = read.csv("LUNG_Cancer_SCC/bumps_analysis.csv")
head(bumps_ad)
grep("MUCDHL",bumps_ad$name)
grep("MUCDH",bumps_ad$name)
grep("MUCD",bumps_ad$name)
grep("MUC",bumps_ad$name)
bumps_ad[grep("MUC",bumps_ad$name),]
bumps_ad[grep("MUP",bumps_ad$name),]
bumps_ad[grep("MU",bumps_ad$name),]
bumps_sc[grep("MU",bumps_ad$name),]
bumps_sc[grep("MU",bumps_sc$name),]
bumps_ad[grep("CD",bumps_ad$name),]
bumps_ad[grep("CDH",bumps_ad$name),]
bumps_ad[grep("CDHR5",bumps_ad$name),]
bumps_ad[grep("CDHR",bumps_ad$name),]
bumps_ad[grep("CDH",bumps_ad$name),]
bumps_sc[grep("CDHR",bumps_sc$name),]
bumps_sc[grep("CDH",bumps_sc$name),]
bumps_sc[grep("?CDH",bumps_sc$name),]
bumps_sc[grep("^CDH",bumps_sc$name),]
cdh_ad = bumps_ad[grep("CDH",bumps_ad$name),]
View(cdh_ad)
cdh_sc = bumps_sc[grep("^CDH",bumps_sc$name),]
cdh_ad = bumps_ad[grep("^CDH",bumps_ad$name),]
View(cdh_ad)
View(cdh_sc)
mu_sc = bumps_sc[grep("^MU",bumps_sc$name),]
View(mu_sc)
View(cdh_sc)
View(cdh_ad)
write.csv(cdh_sc,file = "cdh_bumps_sc.csv")
write.csv(cdh_ad,file = "cdh_bumps_ad.csv")
library(bumphunter)
?bumphunter
`setwd("~/")
`
setwd("~/")
ls
ls()
library(BiocGenerics)
date()
sessionInfo()
library(BiocGenerics)
library(Biobase)
library(RCircos)
my.path = "~/TestRun/ShyamBiswal/circos_plot_test/"
setwd(my.path)
# Import libraries required
library(RCircos)
library(BiocGenerics)
library(Biobase)
# Import Peaks data from Shywam Biswals
parent = read.csv("parent_genes_distFromTSS.csv",stringsAsFactors = FALSE)
knock = read.csv("knockin_genes_distFromTSS.csv",stringsAsFactors = FALSE)
################################################
#Step 1: Curate data for RCircos package
################################################
curate.devaPeaks.to.rcircos = function(peaks.df) {
peaks.df.x = data.frame(peaks.df[,c(3:23,1,2)])
cols.peaks = colnames(peaks.df.x)
cols.peaks[2] = "START"
cols.peaks[3] = "END"
colnames(peaks.df.x) = cols.peaks
return(peaks.df.x)
}
parent.x = curate.devaPeaks.to.rcircos(parent)
knock.x = curate.devaPeaks.to.rcircos(knock)
# Curate knocking pathways first
# Curate to Rcircos
collect.pathways = function(status,path) {
files = list.files(path,full.names=T)
new_df = data.frame()
for (i in 1:length(files)) {
x = read.csv(files[i])
pathwayName = gsub(pattern = paste0("_",status,".csv"),replacement="",x=(gsub(".+/","",files[i])))
x = x[,c(4:7,1:3,7:22)]
knock_df = data.frame(x,pathway = pathwayName,pathwayGene = paste0(x$name,"-",pathwayName))
new_df = rbind(new_df,knock_df)
}
return(new_df)
}
knock_df = collect.pathways(status = "H460_knock","Pathways_knock")
parent_df = collect.pathways(status= "H460_parent","Pathways_parent")
################################################
BiocGenerics::table(knock_df$pathway,knock_df$name)
?Reduce
View(data.frame(knock_df$pathway,knock_df$name)
)
dat = data.frame(knock_df$pathway,knock_df$name)
as.factor(dat$knock_df.pathway)
as.factor(as.character(dat$knock_df.pathway))
levels(dat$knock_df.pathway)
levels(dat$knock_df.pathway,dat$knock_df.name)
levels(dat$knock_df.pathway,dat$knock_df.name),dat$knock_df.name)
View(data.frame(levels(dat$knock_df.pathway),dat$knock_df.name))
View(data.frame(levels(dat$knock_df.pathway),list(dat$knock_df.name))
)
which(dat$knock_df.name %in% levels(dat$knock_df.pathway))
which(levels(dat$knock_df.pathway))
table(dat$knock_df.pathway,dat$knock_df.name)
y= data.matrix(table(dat$knock_df.pathway,dat$knock_df.name))
y
aggregate(dat)
aggregate(x=dat,by=dat$knock_df.pathway)
aggregate(x=dat,by=dat$knock_df.pathway,FUN = NULL)
aggregate(x=dat,by=dat$knock_df.pathway,FUN = mean)
aggregate(x=dat,by=dat$knock_df.pathway,FUN = length)
