rm(list = ls(all =T))
library(survival)
?survival
install.packages("survival")
install.packages("survival")
install.packages("geepack")
install.packages("data.table")
install.packages("../Downloads/Aclust_2.0.tar.gz", repos = NULL,
type = "source")
install.packages("../Downloads/Aclust_2.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/Aclust_2.0.tar.gz", repos = NULL, type = "source")
library(AClust)
library(Aclust)
library(bumphunter)
dummyData()
x = bumphunter::dummyData()
search()
data(betas.7)
data(betas.7)
library(Aclust)
data(betas.7)
?bumphunter
library(bumphunter)
?bumphunter
?clusterMaker
dat =  bumphunter::dummyData()
dim(dat$design)
design
## dat$cluster, is the cluster of genomic locations inot clusters
dat$design
load("~/Documents/Coursera/Data_Analysis/da1/data/loansData.rda")
summary(loansData)
View(loansData)
?table
getwd()
??lme4
?lme
ls()
library(RCircos)
data(RCircos.Heatmap.Data)
head(RCircos.Heatmap.Data)
range(RCircos.Heatmap.Data$BT.549)
data(warpbreaks)
anova.war = aov(warpbreaks$breaks ~ warpbreaks$wool + warpbreaks$tension)
anova.war
anova.war$model
anova.war
summary(anova.war)
library(glm2)
install.packages("glm2")
library(glm2)
data(crabs)
pm = glm(crabs$Satellites~crabs$Width,family = "poisson")
summary(pm)
logit(0.2)
logit(0.2)
?log
??logit
library(boot)
logit(0.2)
print = data.frame(crab,pred = pm$fitted.values)
print = data.frame(crab,pred = pm$fitted)
print = data.frame(crabs,pred = pm$fitted)
print
pm$linear.predictors
library(Aclust)
data(betas.7)
exposure = rbinom(ncol(betas.7), 1,prob = 0.5) ## generate random exposure
covariates = matrix(rnorm(2*ncol(betas.7)), ncol = 2)
rownames(covariates) = colnames(betas.7)
dim(covariates)
head(covariates)
?covariates
?GEE.clusters
?knitr
library(Aclust)
?Aclust
library(Aclust)
install.packages("locfit")
library(Aclust)
install.packages("XVector")
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part
segplot
tree
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'red'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
ls()
getwd()
list.files()
install.packages("rPython")
?rPython
library(rPython)
?rPython
?python.call
a = 1:4
b = 1:5
python.call("len",a)
python.call("len",b)
python.exec("def concat(a,b): return a+b")
python.exec("concat",a,b)
python.call("concat",a,b)
c = python.call("concat",a,b)
c
c = python.call("isinstance",c)
c = python.call("isinstance",c,list)
c = python.call("isinstance",c,"list")
c = python.call("typeof",c)
c = python.call("type",c)
my.path = "~/Documents/JHMI-Research/charmData/ShyamBiswal/" # Local path
sessionInfo()
#############################################
ls -l /Library/Frameworks/R.framework/Versions/
/\
export RSTUDIO_WHICH_R=/usr/local/bin/R
ls
library("BiocGenerics", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("BiocInstaller", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("Biobase", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("Biostrings", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("bit", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
bit
library("bumphunter", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("charm", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("BSgenome", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?unlist
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
l.ex
unlist(l.ex)
unlist(l.ex)[1]
unlist(l.ex)[a1]
charm
read.charm
library(charm)
?readCharm
biocLite()
biocLite(all)
biocLite("OrganismDbi")
library("oligo", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("AnnotationDbi", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
setwd("collected_pathways/")
knock_edit = read.csv("knock_TSS_change_edit_for_latex.csv")
parent_edit = read.csv("parent_TSS_change_edit_for_latex.csv")
x = as.data.frame(table(knock_edit$pathway))
y = as.data.frame(table(parent_edit$pathway))
setwd("~/Documents/JHMI-Research/charmData/ShyamBiswal/collected_pathways/")
knock_edit = read.csv("knock_TSS_change_edit_for_latex.csv")
parent_edit = read.csv("parent_TSS_change_edit_for_latex.csv")
x = as.data.frame(table(knock_edit$pathway))
y = as.data.frame(table(parent_edit$pathway))
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(50),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
par(mar = c(17,7,7,7))
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(50),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
par(mar = c(17,7,7,7))
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(n=20),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
table(knock_edit$name)
levels(knock_edit$name)
levels(factor(knock_edit$name))
levels(as.factor(knock_edit$name))
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(n=133),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
par(mar = c(17,7,7,7))
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
legend("topright",x=knock_edit$name,fill = rainbow(as.factor(knock_edit$name))
legend("topright",x=knock_edit$name,fill = rainbow(as.factor(knock_edit$name)))
par(mar = c(17,7,7,7))
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
legend("topright",x=knock_edit$name,fill = rainbow(as.factor(knock_edit$name)))
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
legend("bottomleft",x=knock_edit$name,fill = rainbow(as.factor(knock_edit$name)))
barchart(table(knock_edit$name,knock_edit$pathway),col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
library(lattice)
barchart(table(knock_edit$name,knock_edit$pathway),col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
barchart(knock_edit$name ~knock_edit$pathway,col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
barchart(knock_edit$pathway ~ knock_edit$name,col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
barchart(knock_edit$pathway ~ knock_edit$name|factor(knock_edit$name),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
barchart(pathway ~ name| factor(name),data = knock_edit,stack =T,auto.key =T)
barchart(pathway| factor(name),data = knock_edit,stack =T,auto.key =T)
library(ggplot2)
View(knock_edit)
View(x)
ggplot(data, aes(x=interaction(name, pathway), y=x$Freq)) + geom_bar(position='stack', stat='identity')
ggplot(knock_edit, aes(x=interaction(name, pathway), y=x$Freq)) + geom_bar(position='stack', stat='identity')
example(barplot)
example(barplot)
library(maps)
examples(maps)
example(maps)
example(coplt)
example(coplot)
library(lattice)
barchart(knock_edit$pathway~knock_edit$name|factor(knock_edit$pathway),data = knock_edit,stack =T,auto.key =T)
?melt
as.matrix(knock_edit)
barplot(as.matrix(knock_edit),col=rainbow(as.factor(knock_edit$name)))
barplot(table(knock_edit$name,knock_edit$pathway))
knock_edit$name
length(unique(knock_edit$name))
barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))))
barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3)
library(lattice)
par(mar = c(17,7,7,7))
barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3)
par(mar = c(27,7,7,7))
barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3)
midpoints = barplot(table(knock_edit$name,knock_edit$pathway))
midpoints
text(midpoints,3,labels = knock_edit$name)
barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3)
midpoints = barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3)
text(midpoints,3 ,labels = knock_edit$name)
midpoints = barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3)
midpoints = barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3,legend=T)
midpoints = barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3)
midpoints = barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3,ylim = c(0,40))
col = brewer.pal(n=length(unique(knock_edit$name)))
col = brewer.pal(n=length(unique(knock_edit$name)),name = "xyz")
col = brewer.pal(n=length(unique(knock_edit$name)),name = "Greens")
midpoints = barplot(table(knock_edit$name,knock_edit$pathway),col = heat.colors(n=length(unique(knock_edit$name))),las=3,ylim = c(0,40))
barplot(knock_edit)
text(x = midpoints)
barplot(table(knock_edit$name,knock_edit$pathway),col=rainbow(as.factor(knock_edit$name)),ylim = c(0,40),names.arg=x$Var1,cex.names=0.7,las = 3,cex.axis=0.5)
text(x = midpoints)
